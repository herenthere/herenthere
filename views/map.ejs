<!--
Marist College - Capping Project - Prof. Arias
HereNThere || Rights reserved
==========================
Juan Diaz
Francesco Galletti
Timbille Kulendi
Kulvinder Lotay
Tashi Palden
Joey Pupel  
==========================
mappage.php is the main page of the web application. Users can
see the details of their trips, see the points of interests
based on their filters and range selections, and can explore
different roadtrips. All the booking and planning is done on
this page.
==========================
Google Maps API v3
Google Places API v3
==========================
Version 0.1 - October 13, 2017
- Trip from point A to B
- Auto completion in text areas
- Google Places API v3, implemented
- Google Maps API v3 (+ skin), implemented
- Basic homepage, mappage, profile page created
Version 0.3 - October 20, 2017
- Login popup
- Registration popup
- hashing / encryption - TODO
- Registration - TODO
- Database tables for USERS - TODO
Version 0.5 - October 27, 2017
- Multiple stops  in a trip - TODO
- Duration and distance each stop - TODO
-->

<!DOCTYPE html>
<html>
  <head>
    <title>HereNThere</title>
    <!--These are the typical Bootstrap (BS) characteristics and basic libraries that BS is based on.
        We are just importing these libraries -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <meta charset="utf-8">

    <!--Style has all the CSS and modifications to edit how things look on the screen.
        For example #map will modify how the Google Maps window looks like. -->
    <style>

      #map {
        height: 100%;
        outline-width: 3px;
        outline-color:#214682;
        outline-style: solid;
      }

      html, body {
        height: 96%;
        background-color: transparent;
      }

      .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      .controlsplus {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 215px;
      }

      #origin-input,
      #destination-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 215px;
      }

      #floating-panel {
        position: absolute;
        top: 15%;
        left: 1%;
        z-index: 5;
        background-color: #214682;
        padding: 5px;
        border: 1px solid #fff;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
        height: 55%;
        width: 20%;
        min-width: 270px;
      }

      #origin-input:focus,
      #destination-input:focus {
        border-color: #4d90fe;
      }

      #mode-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
        margin-bottom: 150px;
      }

      #mode-selector label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

      body {
        background:url('img/backgroundhomepage.png');
        background-size: 150%;
        background-repeat: no-repeat;
      }

      header {
        background-image: url('img/cover.png');
        background-size: 75%;
        color: #ffffff;
        background-color: transparent;
        text-align: center;
        height: 8%;
      }

      .modal-header, h4, .close {
        background-color: #214682;
        color: white;
        text-align: center;
        font-size: 30px;
      }

      .modal-footer {
        background-color: #f9f9f9;
      }

    </style>
  </head>

<!-- 
  ==========================
  ==========================
  =====   END STYLE   ======
  ==========================
  ==========================
-->

  <body>
    <header>
        <% include partials/header %>
    </header>

    <!-- div to initiate Google Maps -->
    <div id="map"></div>
    <!-- floating panel on the left of the map. Origin and Destination text areas -->
    <div id="floating-panel">
      <input id="origin-input" class="controls" type="text"
        placeholder="Enter an origin location"
        value="<%= departure %>">

      <input id="destination-input" class="controls" type="text"
        placeholder="Enter a destination location"
        value="<%= destination %>">


        <input autocomplete="off" class="controlsplus" id="field1" name="prof1" type="text" placeholder="Add a stop."/><button id="b1" class="btn add-more" type="button">+</button>

        <script>
            $(document).ready(function(){
                var next = 1;
                $(".add-more").click(function(e){
                    e.preventDefault();
                    var addto = "#field" + next;
                    var addRemove = "#field" + (next);
                    next = next + 1;
                    var newIn = '<input autocomplete="off" class="controlsplus" id="field' + next + '" name="prof' + next + '" type="text" placeholder="Add a stop.">';
                    var newInput = $(newIn);
                    var removeBtn = '<button id="remove' + (next - 1) + '" class="btn btn-danger remove-me" >-</button></div><div id="field">';
                    var removeButton = $(removeBtn);
                    $(addto).after(newInput);
                    $(addRemove).after(removeButton);
                    $("#count").val(next);
                    
                        $('.remove-me').click(function(e){
                            e.preventDefault();
                            var fieldNum = this.id.charAt(this.id.length-1);
                            var fieldID = "#field" + fieldNum;
                            $(this).remove();
                            $(fieldID).remove();
                        });
                });
            });
        </script>
      
    </div>

      <!-- Filter check boxes - TODO make them actually display Restaurants/Hotels/Points of interests ONLY-->
      <div id="mode-selector" left="-100px" class="controls">
        <input type="checkbox" name="type" id="changemode-walking" checked="checked">
        <label for="changemode-walking">Restaurants</label>

        <input type="checkbox" name="type" id="changemode-transit">
        <label for="changemode-transit">Hotel</label>

        <input type="checkbox" name="type" id="changemode-driving">
        <label for="changemode-driving">Points of Interest</label>
      </div>

    <script>

      // Code for modal to pop up when click on myBtn (profile icon)  
      $(document).ready(function(){
          $("#myBtn").click(function(){
              $("#myModal").modal();
          });
      });

      // Initialize Google Maps map. Give it skin, then variables map, then camera location, then autocomplete functions.
      function initMap() {

        // Create a new StyledMapType object, passing it an array of styles,
        // and the name to be displayed on the map type control.
        var styledMapType = new google.maps.StyledMapType(
                [
                {elementType: 'geometry', stylers: [{color: '#242f3e'}]},
                {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},
                {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
                {
                  featureType: 'administrative.locality',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#d59563'}]
                },
                {
                  featureType: 'poi',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#d59563'}]
                },
                {
                  featureType: 'poi.park',
                  elementType: 'geometry',
                  stylers: [{color: '#263c3f'}]
                },
                {
                  featureType: 'poi.park',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#6b9a76'}]
                },
                {
                  featureType: 'road',
                  elementType: 'geometry',
                  stylers: [{color: '#38414e'}]
                },
                {
                  featureType: 'road',
                  elementType: 'geometry.stroke',
                  stylers: [{color: '#212a37'}]
                },
                {
                  featureType: 'road',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#9ca5b3'}]
                },
                {
                  featureType: 'road.highway',
                  elementType: 'geometry',
                  stylers: [{color: '#746855'}]
                },
                {
                  featureType: 'road.highway',
                  elementType: 'geometry.stroke',
                  stylers: [{color: '#1f2835'}]
                },
                {
                  featureType: 'road.highway',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#f3d19c'}]
                },
                {
                  featureType: 'transit',
                  elementType: 'geometry',
                  stylers: [{color: '#2f3948'}]
                },
                {
                  featureType: 'transit.station',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#d59563'}]
                },
                {
                  featureType: 'water',
                  elementType: 'geometry',
                  stylers: [{color: '#17263c'}]
                },
                {
                  featureType: 'water',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#515c6d'}]
                },
                {
                  featureType: 'water',
                  elementType: 'labels.text.stroke',
                  stylers: [{color: '#17263c'}]
                },
              ],
            {name: 'Map'});
            
          var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 40.7128, lng: -74.0059},
          fullscreenControl: false,
          mapTypeControlOptions: {
            mapTypeIds: ['styled_map', 'satellite'],
            position: google.maps.ControlPosition.TOP_RIGHT  
          },
          zoom: 9
        });

        //Associate the styled map with the MapTypeId and set it to display.
        map.mapTypes.set('styled_map', styledMapType);
        map.setMapTypeId('styled_map');

        new AutocompleteDirectionsHandler(map);
      }

       /**
        * @constructor
       */
      function AutocompleteDirectionsHandler(map) {
        this.map = map;
        this.originPlaceId = null;
        this.destinationPlaceId = null;
        this.travelMode = 'DRIVING';
        var originInput = document.getElementById('origin-input');
        var destinationInput = document.getElementById('destination-input');
        var modeSelector = document.getElementById('mode-selector');
        this.directionsService = new google.maps.DirectionsService;
        this.directionsDisplay = new google.maps.DirectionsRenderer;
        this.directionsDisplay.setMap(map);

        var originAutocomplete = new google.maps.places.Autocomplete(
            originInput, {placeIdOnly: true});
        var destinationAutocomplete = new google.maps.places.Autocomplete(
            destinationInput, {placeIdOnly: true});

        this.setupClickListener('changemode-driving', 'DRIVING');

        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

        this.map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(modeSelector);
      }

      // Sets a listener on a radio button to change the filter type on Places
      // Autocomplete.
      AutocompleteDirectionsHandler.prototype.setupClickListener = function(id, mode) {
        var radioButton = document.getElementById(id);
        var me = this;
        radioButton.addEventListener('click', function() {
          me.travelMode = mode;
          me.route();
        });
      };

      AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
        var me = this;
        autocomplete.bindTo('bounds', this.map);
        autocomplete.addListener('place_changed', function() {
          var place = autocomplete.getPlace();
          if (!place.place_id) {
            window.alert("Please select an option from the dropdown list.");
            return;
          }
          if (mode === 'ORIG') {
            me.originPlaceId = place.place_id;
          } else {
            me.destinationPlaceId = place.place_id;
          }
          me.route();
        });
      };

      AutocompleteDirectionsHandler.prototype.route = function() {
        if (!this.originPlaceId || !this.destinationPlaceId) {
          return;
        }
        var me = this;

        this.directionsService.route({
          origin: {'placeId': this.originPlaceId},
          destination: {'placeId': this.destinationPlaceId},
          travelMode: this.travelMode
        }, function(response, status) {
          if (status === 'OK') {
            me.directionsDisplay.setDirections(response);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      };

      // Callback used by async scripted link below
      function callback(results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          for (var i = 0; i < results.length; i++) {
            createMarker(results[i]);
          }
        }
      }
      </script>

    <!-- Connects the map to the API key that we have registered -->
    <script async defer
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDOVAWCWgAiZ_iTjXOVIBoJC0Y-_1xRNos&callback=initMap&libraries=places">
    </script>

  </body>
</html>

<!--
=========================
======  TODO    =========

- Height maps needs to be scalable, use % instead of px.
- Put destinations
- 23 waypoints MAX - NOTE

      function createMarker(place) {
        var placeLoc = place.geometry.location;
        var marker = new google.maps.Marker({
          map: map,
          position: place.geometry.location
        });

        google.maps.event.addListener(marker, 'click', function() {
          infowindow.setContent(place.name);
          infowindow.open(map, this);
        });
      }
