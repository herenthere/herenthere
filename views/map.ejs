<!--
Marist College - Capping Project - Prof. Arias
HereNThere || Rights reserved
==========================
Juan Diaz
Francesco Galletti
Timbille Kulendi
Kulvinder Lotay
Tashi Palden
Joey Pupel  
==========================
mappage.php is the main page of the web application. Users can
see the details of their trips, see the points of interests
based on their filters and range selections, and can explore
different roadtrips. All the booking and planning is done on
this page.
==========================
Google Maps API v3
Google Places API v3
==========================
Version 0.1 - October 13, 2017
- Trip from point A to B
- Auto completion in text areas
- Google Places API v3, implemented
- Google Maps API v3 (+ skin), implemented
- Basic homepage, mappage, profile page created
Version 0.3 - October 20, 2017
- Login popup
- Registration popup
- hashing / encryption - TODO
- Registration - TODO
- Database tables for USERS - TODO
Version 0.5 - October 27, 2017
- Multiple stops  in a trip - TODO
- Duration and distance each stop - TODO
-->

<!DOCTYPE html>
<html>
  <head>
    <title>HereNThere</title>
    <!--These are the typical Bootstrap (BS) characteristics and basic libraries that BS is based on.
        We are just importing these libraries -->
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

    <!-- jQuery UI Datepicker -->
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src = "https://code.jquery.com/jquery-1.10.2.js"></script>
    <script src = "https://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>

    <!--Style has all the CSS and modifications to edit how things look on the screen.
        For example #map will modify how the Google Maps window looks like. -->
    <link rel = "stylesheet"
      type = "text/css"
      href = "../files/css/main.css" />
      
  </head>

<!-- 
  ==========================
  ==========================
  =====   END STYLE   ======
  ==========================
  ==========================
-->

  <body>
      <header>
          <% include partials/header %>
      </header>

    <!-- floating panel on the left of the map. Origin and Destination text areas -->
    <div id="floating-panel">
      <div class="panel-group" id="accordion">
          <div class="panel panel-default">
            <div class="panel-heading">
              <h4 class="panel-title">
                <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" style="float:center;">
                  <p align="center" style="font-size: 25px;">Trip Details</p>
                </a>
              </h4>
            </div>
            <div id="collapseOne" class="panel-collapse collapse in">
              <div class="panel-body"> <!--BODY INSIDE FIRST PANEL -->
                <input class="controlsplusdate" id="datestop0" name="datestop0" type="text" placeholder="Date" maxlength="5">
                <input class="controlsplus" id="origin-input" name="origin-input" type="text" placeholder="Enter an origin location" value="<%= departure %>"/>
                <input id="origin-input-placeid" name="origin-input-placeid" type="text" value="<%= departureplaceid %>" hidden>
                <!-- <div id="scrolling-window" data-spy="scroll"> -->
                  <!-- <input autocomplete="off" class="controlsplus" id="field1" name="prof1" type="text" placeholder="Add a stop..."/> -->
                    
                <script>
                  var waypoints = [];
                  var directionsHandler = "";
                </script>
          
                <br id="br1" name="br1">
                <input class="controlsplusdate" id="datestop1" name="datestop1" type="text" placeholder="Date" maxlength="5"><input class="controlsplus" id="waypoint1" name="waypoint1" type="text" placeholder="Add a stop.."/><button id="add-waypoint" class="btn add-more" type="button">+</button>
                                
                <script>
                  waypoints.push('waypoint1');
                  $(document).ready(function(){
                      var next = 1;
                      $(".add-more").click(function(e){
                        e.preventDefault();
                        var addto = "#waypoint" + next;
                        var addRemove = "#waypoint" + (next);
                        
                        next++;
          
                        var brek = '<br id="br' + next + '" name="br' + next + '">';
                        var dateStop =  '<input class="controlsplusdate" id="datestop' + next + '" name="datestop' + next + '" type="text" placeholder="Date" maxlength="5">';
                        var newIn = '<input class="controlsplus" id="waypoint' + next + '" name="waypoint' + next + '" type="text" placeholder="Add a stop...">';
                        waypoints.push('waypoint' + next);
                        // TODO add datestop push
                        // console.log(waypoints);
                        
                        var brInput = $(brek);
                        var dateStopInput = $(dateStop);
                        var newInput = $(newIn);
                        
                        var removeBtn = '<button id="remove' + (next - 1) + '" class="btn btn-danger remove-me" >-</button></div>';
                        var removeButton = $(removeBtn);
                        // console.log(removeBtn);
                        
                        $(addto).after(newInput);
                        $(addto).after(dateStopInput);
                        $(addto).after(brInput);                     
                        
                        $(addRemove).after(removeButton);

                        directionsHandler.updateWaypoints();
                        
                        // $("#count").val(next);
                        $('.remove-me').click(function(e){
                          // e.preventDefault();
                          var waypointNum = this.id.charAt(this.id.length-1);
                          var brekID = "#br" + waypointNum;
                          var datestopID = "#datestop" + waypointNum;
                          var waypointID = "#waypoint" + waypointNum;
                          
                          var index = waypoints.indexOf('waypoint' + waypointNum);
                          // console.log('it ran');
                          // console.log(waypoints);
                          if(index != -1){
                            waypoints.splice(index, 1);
                            directionsHandler.updateWaypoints();
                          }
                          // console.log(this);
                          // console.log(waypoints);
                          $(this).remove();
                          $(brekID).remove();
                          $(datestopID).remove();
                          $(waypointID).remove();
                        });
                      });
                  });
                </script>
                <!-- </div> -->
          
                <!-- TODO IMPLEMENT DATE -->
                <input class="controlsplusdate" id="datestopfinal" name="datestopfinal" type="text" placeholder="Date" maxlength="5"/>
                <input id="destination-input" name="destination-input" class="controlsplus" type="text" placeholder="Enter a destination location" value="<%= destination %>"/>    
                <input id="destination-input-placeid" name="destination-input-placeid" type="text" value="<%= destinationplaceid %>" hidden>
              </div>
            </div>
          </div>
          <div class="panel panel-default template">
            <div class="panel-heading">
              <h4 class="panel-title">
                <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#collapseThree">
                  <p align="center" style="font-size: 25px;">Trip Settings</p>
                </a>
              </h4>
            </div>
            <div id="collapseThree" class="panel-collapse collapse">
              <div class="panel-body"> <!--BODY INSIDE SECOND  PANEL -->                   
                <mapp1panel>Number of hours to drive daily</mapp1panel> <input type="number" name="hoursdrivedaily" id="hoursdrivedaily" value="<%= hoursdrivedaily %>" min="1" max="99" style="width:50px;color:black;float:right;"/><br><br>
                <mapp1panel>Maximum number of days on the road</mapp1panel> <input type="number" name="maxdaysonroad" id="maxdaysonroad" value="<%= maxdaysonroad %>" min="1" max="99" style="width:50px;color:black;float:right;"/><br><br>
                <mapp1panel>Usual time for lunch</mapp1panel> <input type="number" name="timelunch" id="timelunch" value="<%= timelunch %>"  min="12" max="24" style="width:50px;color:black;float:right;"/><br> <br>
                <mapp1panel>Usual time for dinner</mapp1panel> <input type="number" name="timedinner" id="timedinner" value="<%= timedinner %>" min="18" max="24" style="width:50px;color:black;float:right;"/><br><br>
                <mapp1panel>Maximum time driving not stopping</mapp1panel> <input type="number" name="maxtimedrive" id="maxtimedrive" value="<%= maxtimedrive %>" min="1" max="99" style="width:50px;color:black;float:right;"/> <br>
                <br>
                <div id="maptogglePublicPrivate" align="center"> <!-- TODO radio buttons passing to next page -->
                  <label class="grey"><input type="radio" name="toggle" id="privatetoggle"><span>Private</span></label>
                  <label class="blue"><input type="radio" name="toggle" id="publictoggle"><span>Public</span></label>
                </div>
                <br>
                <div id="slidecontainer">
                    <input type="range" min="10" max="31" value="15" class="slider" id="myRange"/>
                    <h3 id="demo" name="slidervalue" style="color:black;"></h3>
                </div>
                <script>
                    var slider = document.getElementById("myRange");
                    var output = document.getElementById("demo");
                    output.innerHTML = slider.value; // Display the default slider value
            
                    // Update the current slider value (each time you drag the slider handle)
                    slider.oninput = function() {
                        output.innerHTML = this.value;
                    }
                  </script>
              </div>
            </div>
            <div id="icons">
                <buttons><img src="../files/img/restaurantgreyicon.png" style="width:50px;height:50px;" id="changeImgrestaurant"></buttons>
                <buttons><img src="../files/img/hotelgreyicon.png" style="width:50px;height:50px;" id="changeImghotel"></buttons>
                <buttons><img src="../files/img/pointsofinterestgreyicon.png" style="width:50px;height:50px;" id="changeImgpointsofinterest"></buttons>
                <div style="float:right; padding-top:5px;padding-right:20px;">
                  <!-- TODO Delete </button> next line -->
                  <input type="submit" class="btn btn-success" value="Save"></button> 
                </div>  
              </div>
          </div>
        </div>  
    </div>

    <!-- div to initiate Google Maps -->
    <div id="map"></div>

    <div id="infowindow-content">
      <img src="" width="16" height="16" id="place-icon">
      <span id="place-name"  class="title"></span><br>
      <span id="place-address"></span>
    </div>
      <br>
      <button class="btn btn-lg btn-primary btn-add-panel">
          <i class="glyphicon glyphicon-plus"></i> Add new panel
      </button>
      <!-- Filter check boxes - TODO make them actually display Restaurants/Hotels/Points of interests ONLY-->

    <script>

      //datepicker function
      // $(function() {
      //   $( "#departure-datepicker" ).datepicker({
      //     prevText:"click for previous months",
      //     nextText:"click for next months",
      //     showOtherMonths:true,
      //     selectOtherMonths: false
      //   });
      //   $( "#destination-datepicker" ).datepicker({
      //     prevText:"click for previous months",
      //     nextText:"click for next months",
      //     showOtherMonths:true,
      //     selectOtherMonths: true
      //   });
      // });

      $(function(dateID) {
        $( "#" + dateID ).datepicker({
          prevText:"click for previous months",
          nextText:"click for next months",
          showOtherMonths:true,
          selectOtherMonths: false
        });
        $( "#" + dateID ).datepicker({
          prevText:"click for previous months",
          nextText:"click for next months",
          showOtherMonths:true,
          selectOtherMonths: true
        });
      });

      // Initialize Google Maps map. Give it skin, then variables map, then camera location, then autocomplete functions.
      function initMap() {

        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 40.7128, lng: -74.0059},
          fullscreenControl: false,
          mapTypeControlOptions: {
            mapTypeIds: ['styled_map', 'satellite'],
            position: google.maps.ControlPosition.TOP_RIGHT  
          },
          
          zoom: 9
        });

        // var types = document.getElementById('type-selector');

        var infowindow = new google.maps.InfoWindow();
        var infowindowcontent = document.getElementById('infowindow-content');
        var inputs = {};

        // Create a new StyledMapType object, passing it an array of styles,
        // and the name to be displayed on the map type control.
        var styledMapType = new google.maps.StyledMapType(
          [
            {elementType: 'geometry', stylers: [{color: '#242f3e'}]},
            {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},
            {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
            {
              featureType: 'administrative.locality',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'poi',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'poi.park',
              elementType: 'geometry',
              stylers: [{color: '#263c3f'}]
            },
            {
              featureType: 'poi.park',
              elementType: 'labels.text.fill',
              stylers: [{color: '#6b9a76'}]
            },
            {
              featureType: 'road',
              elementType: 'geometry',
              stylers: [{color: '#38414e'}]
            },
            {
              featureType: 'road',
              elementType: 'geometry.stroke',
              stylers: [{color: '#212a37'}]
            },
            {
              featureType: 'road',
              elementType: 'labels.text.fill',
              stylers: [{color: '#9ca5b3'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'geometry',
              stylers: [{color: '#746855'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'geometry.stroke',
              stylers: [{color: '#1f2835'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'labels.text.fill',
              stylers: [{color: '#f3d19c'}]
            },
            {
              featureType: 'transit',
              elementType: 'geometry',
              stylers: [{color: '#2f3948'}]
            },
            {
              featureType: 'transit.station',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'water',
              elementType: 'geometry',
              stylers: [{color: '#17263c'}]
            },
            {
              featureType: 'water',
              elementType: 'labels.text.fill',
              stylers: [{color: '#515c6d'}]
            },
            {
              featureType: 'water',
              elementType: 'labels.text.stroke',
              stylers: [{color: '#17263c'}]
            },
          ],

          {name: 'Map'}
        );

        //Associate the styled map with the MapTypeId and set it to display.
        map.mapTypes.set('styled_map', styledMapType);
        map.setMapTypeId('styled_map');

        directionsHandler = new AutocompleteDirectionsHandler(map);

        // infowindow
        infowindow.setContent(infowindowcontent);
      }

      // var marker = new google.maps.Marker({
      //   map: map,
      //   anchorPoint: new google.maps.Point(0, -29)
      // });

       /**
        * @constructor
       */
      function AutocompleteDirectionsHandler(map) {
        var originInput = document.getElementById('origin-input');
        var destinationInput = document.getElementById('destination-input');
        var originInputPlaceId = document.getElementById('origin-input-placeid');
        var destinationInputPlaceId = document.getElementById('destination-input-placeid');

        this.waypointsAutocomplete = [];
        this.waypointsPlaceIds = [];
        this.waypointRoutes = [];

        this.map = map;        
        
        this.travelMode = 'DRIVING';
        this.directionsService = new google.maps.DirectionsService;
        this.service = new google.maps.places.PlacesService(map);
        //this.directionsResult = google.maps.DirectionsService.getDirections();
        this.directionsDisplay = new google.maps.DirectionsRenderer;
        this.directionsDisplay.setMap(map);

        // this.waypoints = [{location: {placeId: 'ChIJOwg_06VPwokRYv534QaPC8g'}}];

        if(originInputPlaceId.value && destinationInputPlaceId.value){
          this.originPlaceId = originInputPlaceId.value;
          console.log(this.originPlaceId);
          this.destinationPlaceId = destinationInputPlaceId.value;
          console.log(this.destinationPlaceId);

          directionsServiceRoute(this, this.originPlaceId, this.destinationPlaceId, this.travelMode, this.waypoints);
        }
        else{
          this.originPlaceId = null;
          this.destinationPlaceId = null;
        }

        var originAutocomplete = new google.maps.places.Autocomplete(
            originInput, {placeIdOnly: true});
        var destinationAutocomplete = new google.maps.places.Autocomplete(
            destinationInput, {placeIdOnly: true});

        // this.setupClickListener('changemode-driving', 'DRIVING');

        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');
      
        this.updateWaypoints();
      }

      AutocompleteDirectionsHandler.prototype.updateWaypoints = function(){
        // console.log(document.getElementById(waypoints[0]));

        var me = this;

        for (i = 0; i < waypoints.length; i++){
          me.waypointsAutocomplete.push(new google.maps.places.Autocomplete(
            document.getElementById(waypoints[i]), {placeIdOnly: true}
          ));

          me.waypointsPlaceIds.push(null);
        }

        for (x = 0; x < me.waypointsAutocomplete.length; x++){
          me.setupPlaceChangedListener(me.waypointsAutocomplete[x], x);
        }

        // showPOI(me);
      }
      // Sets a listener on a radio button to change the filter type on Places
      // Autocomplete.
      // AutocompleteDirectionsHandler.prototype.setupClickListener = function(id, mode) {
      //   var radioButton = document.getElementById(id);
      //   var me = this;
      //   radioButton.addEventListener('click', function() {
      //     me.travelMode = mode;
      //     me.route();
      //   });
      // };

      AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
        var me = this;
        // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.
        autocomplete.bindTo('bounds', this.map);
        
        autocomplete.addListener('place_changed', function() {
          // infowindow.close();
          // market.setVisible(false);
          var place = autocomplete.getPlace();
          if (!place.place_id) {
            window.alert("Please select an option from the dropdown list.");
            return;
          }
          if (mode === 'ORIG') {
            me.originPlaceId = place.place_id;
          } 
          else if (mode === 'DEST'){
            me.destinationPlaceId = place.place_id;
          }
          else {
            me.waypointsPlaceIds[mode] = place.place_id;
            me.waypointRoutes.push({location: {placeId: me.waypointsPlaceIds[mode]}});
          }

          me.route();
        });
      };

      AutocompleteDirectionsHandler.prototype.route = function() {
        if (!this.originPlaceId || !this.destinationPlaceId) {
          return;
        }
        var me = this;

        console.log(this.waypointRoutes);

        //Calling google.maps.DirectionsService.route method, passing a request: DirectionsRequest and callback: function(DirectionsResult, DirectionsStatus)
        directionsServiceRoute(me, this.originPlaceId, this.destinationPlaceId, this.travelMode, this.waypointRoutes);
      };

      function directionsServiceRoute(me, originPlaceId, destinationPlaceId, travelMode, waypoints){
        me.directionsService.route(
          //DirectionsRequest Object
          {
            origin: {'placeId': originPlaceId},
            destination: {'placeId': destinationPlaceId},
            //Pass Waypoints
            waypoints: waypoints,
            travelMode: travelMode
          },
          
          function(response, status) {
          if (status === 'OK') {            
            //store this shit
            me.directionsDisplay.setDirections(response);
            showPOI(me, response);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }

      function showPOI(me, directionsResult){
        var legs = directionsResult.routes[0].legs;
        var cumulative_length = 0;

        for(var i = 0; i < legs.length; i++){
          cumulative_length += legs[i].distance.value;

          //range * 2 TODO
          if(cumulative_length >= 62){
            //nearby search
            me.service.nearbySearch(
              {
                bounds: me.map.getBounds(),
                //keyword
                location: legs[i].end_location
              },                          
              
              function(results, status, pagination){
                createMarkers(me.map, results);
              }
            )
          
            cumulative_length = 0;
          }
        }
      }

      //Create markets given a list of places
      function createMarkers(map, places) {
        //var bounds = map.getBounds();      
        //var placesList = document.getElementById('places');

        for (var i = 0, place; place = places[i]; i++) {
          var image = {
            url: place.icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
          };

          var marker = new google.maps.Marker({
            map: map,
            icon: image,
            title: place.name,
            position: place.geometry.location
          });

          //bounds.extend(place.geometry.location);
        }
        //map.fitBounds(bounds);
      }

      // Callback used by async scripted link below
      function callback(results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          for (var i = 0; i < results.length; i++) {
            createMarker(results[i]);
          }
        }
      }
      
    </script>

    <!-- Connects the map to the API key that we have registered -->
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDOVAWCWgAiZ_iTjXOVIBoJC0Y-_1xRNos&callback=initMap&libraries=places"></script>

  </body>
</html>

<!--
=========================
======  TODO    =========

- Height maps needs to be scalable, use % instead of px.
- Put destinations
- 23 waypoints MAX - NOTE
- reduce the left panel to three little things so user can see whole page
      function createMarker(place) {
        var placeLoc = place.geometry.location;
        var marker = new google.maps.Marker({
          map: map,
          position: place.geometry.location
        });

        google.maps.event.addListener(marker, 'click', function() {
          infowindow.setContent(place.name);
          infowindow.open(map, this);
        });
      }
